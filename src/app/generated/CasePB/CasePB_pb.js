// source: src/app/Protos/CasePB.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global = (function() { return this || window || global || self || Function('return this')(); }).call(null);

goog.exportSymbol('proto.CasePB.CaseList', null, global);
goog.exportSymbol('proto.CasePB.CaseObject', null, global);
goog.exportSymbol('proto.CasePB.CaseSystemObject', null, global);
goog.exportSymbol('proto.CasePB.CaseUnitObject', null, global);
goog.exportSymbol('proto.CasePB.FrontPageObject', null, global);
goog.exportSymbol('proto.CasePB.FrontpageList', null, global);
goog.exportSymbol('proto.CasePB.PropertyTypeObject', null, global);
goog.exportSymbol('proto.CasePB.PropertyUsabilityObject', null, global);
goog.exportSymbol('proto.CasePB.RenovationAppendixObject', null, global);
goog.exportSymbol('proto.CasePB.StatusRepley', null, global);
goog.exportSymbol('proto.CasePB.UserObject', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.CasePB.CaseObject = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.CasePB.CaseObject, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.CasePB.CaseObject.displayName = 'proto.CasePB.CaseObject';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.CasePB.CaseList = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.CasePB.CaseList.repeatedFields_, null);
};
goog.inherits(proto.CasePB.CaseList, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.CasePB.CaseList.displayName = 'proto.CasePB.CaseList';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.CasePB.FrontPageObject = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.CasePB.FrontPageObject, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.CasePB.FrontPageObject.displayName = 'proto.CasePB.FrontPageObject';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.CasePB.FrontpageList = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.CasePB.FrontpageList.repeatedFields_, null);
};
goog.inherits(proto.CasePB.FrontpageList, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.CasePB.FrontpageList.displayName = 'proto.CasePB.FrontpageList';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.CasePB.CaseUnitObject = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.CasePB.CaseUnitObject, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.CasePB.CaseUnitObject.displayName = 'proto.CasePB.CaseUnitObject';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.CasePB.UserObject = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.CasePB.UserObject, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.CasePB.UserObject.displayName = 'proto.CasePB.UserObject';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.CasePB.PropertyUsabilityObject = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.CasePB.PropertyUsabilityObject, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.CasePB.PropertyUsabilityObject.displayName = 'proto.CasePB.PropertyUsabilityObject';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.CasePB.CaseSystemObject = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.CasePB.CaseSystemObject, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.CasePB.CaseSystemObject.displayName = 'proto.CasePB.CaseSystemObject';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.CasePB.PropertyTypeObject = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.CasePB.PropertyTypeObject, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.CasePB.PropertyTypeObject.displayName = 'proto.CasePB.PropertyTypeObject';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.CasePB.RenovationAppendixObject = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.CasePB.RenovationAppendixObject, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.CasePB.RenovationAppendixObject.displayName = 'proto.CasePB.RenovationAppendixObject';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.CasePB.StatusRepley = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.CasePB.StatusRepley, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.CasePB.StatusRepley.displayName = 'proto.CasePB.StatusRepley';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.CasePB.CaseObject.prototype.toObject = function(opt_includeInstance) {
  return proto.CasePB.CaseObject.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.CasePB.CaseObject} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.CasePB.CaseObject.toObject = function(includeInstance, msg) {
  var f, obj = {
    caseid: jspb.Message.getFieldWithDefault(msg, 1, 0),
    casenumber: jspb.Message.getFieldWithDefault(msg, 2, 0),
    casename: jspb.Message.getFieldWithDefault(msg, 3, ""),
    description: jspb.Message.getFieldWithDefault(msg, 4, ""),
    priceyear: jspb.Message.getFieldWithDefault(msg, 5, 0),
    creationdate: jspb.Message.getFieldWithDefault(msg, 6, ""),
    casetypeid: jspb.Message.getFieldWithDefault(msg, 7, 0),
    amount: jspb.Message.getFieldWithDefault(msg, 8, 0),
    caseunitid: jspb.Message.getFieldWithDefault(msg, 9, 0),
    floor: jspb.Message.getFieldWithDefault(msg, 10, 0),
    casesystemid: jspb.Message.getFieldWithDefault(msg, 11, 0),
    year: jspb.Message.getFieldWithDefault(msg, 12, 0),
    casedescription: jspb.Message.getFieldWithDefault(msg, 13, ""),
    caseimagepath: jspb.Message.getFieldWithDefault(msg, 14, ""),
    casemoviepath: jspb.Message.getFieldWithDefault(msg, 15, ""),
    caseimportpath: jspb.Message.getFieldWithDefault(msg, 16, ""),
    casepdfpath: jspb.Message.getFieldWithDefault(msg, 17, ""),
    wellnumberLang: jspb.Message.getFieldWithDefault(msg, 18, ""),
    wellnumberBips: jspb.Message.getFieldWithDefault(msg, 19, ""),
    userid: jspb.Message.getFieldWithDefault(msg, 20, 0),
    propertybbr: jspb.Message.getFieldWithDefault(msg, 21, 0),
    propertyname: jspb.Message.getFieldWithDefault(msg, 22, ""),
    propertyage: jspb.Message.getFieldWithDefault(msg, 23, 0),
    propertytypeid: jspb.Message.getFieldWithDefault(msg, 24, 0),
    propertyapplicationid: jspb.Message.getFieldWithDefault(msg, 25, 0),
    propertyaddress: jspb.Message.getFieldWithDefault(msg, 26, ""),
    propertypostalnumber: jspb.Message.getFieldWithDefault(msg, 27, 0),
    propertycity: jspb.Message.getFieldWithDefault(msg, 28, ""),
    propertycadastrenumber: jspb.Message.getFieldWithDefault(msg, 29, ""),
    propertyownerlow: jspb.Message.getFieldWithDefault(msg, 30, ""),
    caselanguage: jspb.Message.getFieldWithDefault(msg, 31, 0),
    standardrenovationcaseid: jspb.Message.getFieldWithDefault(msg, 32, 0),
    entrepreneurid: jspb.Message.getFieldWithDefault(msg, 33, 0),
    districtid: jspb.Message.getFieldWithDefault(msg, 34, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.CasePB.CaseObject}
 */
proto.CasePB.CaseObject.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.CasePB.CaseObject;
  return proto.CasePB.CaseObject.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.CasePB.CaseObject} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.CasePB.CaseObject}
 */
proto.CasePB.CaseObject.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setCaseid(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setCasenumber(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setCasename(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setDescription(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setPriceyear(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setCreationdate(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setCasetypeid(value);
      break;
    case 8:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setAmount(value);
      break;
    case 9:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setCaseunitid(value);
      break;
    case 10:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setFloor(value);
      break;
    case 11:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setCasesystemid(value);
      break;
    case 12:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setYear(value);
      break;
    case 13:
      var value = /** @type {string} */ (reader.readString());
      msg.setCasedescription(value);
      break;
    case 14:
      var value = /** @type {string} */ (reader.readString());
      msg.setCaseimagepath(value);
      break;
    case 15:
      var value = /** @type {string} */ (reader.readString());
      msg.setCasemoviepath(value);
      break;
    case 16:
      var value = /** @type {string} */ (reader.readString());
      msg.setCaseimportpath(value);
      break;
    case 17:
      var value = /** @type {string} */ (reader.readString());
      msg.setCasepdfpath(value);
      break;
    case 18:
      var value = /** @type {string} */ (reader.readString());
      msg.setWellnumberLang(value);
      break;
    case 19:
      var value = /** @type {string} */ (reader.readString());
      msg.setWellnumberBips(value);
      break;
    case 20:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setUserid(value);
      break;
    case 21:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setPropertybbr(value);
      break;
    case 22:
      var value = /** @type {string} */ (reader.readString());
      msg.setPropertyname(value);
      break;
    case 23:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setPropertyage(value);
      break;
    case 24:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setPropertytypeid(value);
      break;
    case 25:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setPropertyapplicationid(value);
      break;
    case 26:
      var value = /** @type {string} */ (reader.readString());
      msg.setPropertyaddress(value);
      break;
    case 27:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setPropertypostalnumber(value);
      break;
    case 28:
      var value = /** @type {string} */ (reader.readString());
      msg.setPropertycity(value);
      break;
    case 29:
      var value = /** @type {string} */ (reader.readString());
      msg.setPropertycadastrenumber(value);
      break;
    case 30:
      var value = /** @type {string} */ (reader.readString());
      msg.setPropertyownerlow(value);
      break;
    case 31:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setCaselanguage(value);
      break;
    case 32:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setStandardrenovationcaseid(value);
      break;
    case 33:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setEntrepreneurid(value);
      break;
    case 34:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setDistrictid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.CasePB.CaseObject.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.CasePB.CaseObject.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.CasePB.CaseObject} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.CasePB.CaseObject.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCaseid();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getCasenumber();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = message.getCasename();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getDescription();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getPriceyear();
  if (f !== 0) {
    writer.writeInt32(
      5,
      f
    );
  }
  f = message.getCreationdate();
  if (f.length > 0) {
    writer.writeString(
      6,
      f
    );
  }
  f = message.getCasetypeid();
  if (f !== 0) {
    writer.writeInt32(
      7,
      f
    );
  }
  f = message.getAmount();
  if (f !== 0) {
    writer.writeInt32(
      8,
      f
    );
  }
  f = message.getCaseunitid();
  if (f !== 0) {
    writer.writeInt32(
      9,
      f
    );
  }
  f = message.getFloor();
  if (f !== 0) {
    writer.writeInt32(
      10,
      f
    );
  }
  f = message.getCasesystemid();
  if (f !== 0) {
    writer.writeInt32(
      11,
      f
    );
  }
  f = message.getYear();
  if (f !== 0) {
    writer.writeInt32(
      12,
      f
    );
  }
  f = message.getCasedescription();
  if (f.length > 0) {
    writer.writeString(
      13,
      f
    );
  }
  f = message.getCaseimagepath();
  if (f.length > 0) {
    writer.writeString(
      14,
      f
    );
  }
  f = message.getCasemoviepath();
  if (f.length > 0) {
    writer.writeString(
      15,
      f
    );
  }
  f = message.getCaseimportpath();
  if (f.length > 0) {
    writer.writeString(
      16,
      f
    );
  }
  f = message.getCasepdfpath();
  if (f.length > 0) {
    writer.writeString(
      17,
      f
    );
  }
  f = message.getWellnumberLang();
  if (f.length > 0) {
    writer.writeString(
      18,
      f
    );
  }
  f = message.getWellnumberBips();
  if (f.length > 0) {
    writer.writeString(
      19,
      f
    );
  }
  f = message.getUserid();
  if (f !== 0) {
    writer.writeInt32(
      20,
      f
    );
  }
  f = message.getPropertybbr();
  if (f !== 0) {
    writer.writeInt32(
      21,
      f
    );
  }
  f = message.getPropertyname();
  if (f.length > 0) {
    writer.writeString(
      22,
      f
    );
  }
  f = message.getPropertyage();
  if (f !== 0) {
    writer.writeInt32(
      23,
      f
    );
  }
  f = message.getPropertytypeid();
  if (f !== 0) {
    writer.writeInt32(
      24,
      f
    );
  }
  f = message.getPropertyapplicationid();
  if (f !== 0) {
    writer.writeInt32(
      25,
      f
    );
  }
  f = message.getPropertyaddress();
  if (f.length > 0) {
    writer.writeString(
      26,
      f
    );
  }
  f = message.getPropertypostalnumber();
  if (f !== 0) {
    writer.writeInt32(
      27,
      f
    );
  }
  f = message.getPropertycity();
  if (f.length > 0) {
    writer.writeString(
      28,
      f
    );
  }
  f = message.getPropertycadastrenumber();
  if (f.length > 0) {
    writer.writeString(
      29,
      f
    );
  }
  f = message.getPropertyownerlow();
  if (f.length > 0) {
    writer.writeString(
      30,
      f
    );
  }
  f = message.getCaselanguage();
  if (f !== 0) {
    writer.writeInt32(
      31,
      f
    );
  }
  f = message.getStandardrenovationcaseid();
  if (f !== 0) {
    writer.writeInt32(
      32,
      f
    );
  }
  f = message.getEntrepreneurid();
  if (f !== 0) {
    writer.writeInt32(
      33,
      f
    );
  }
  f = message.getDistrictid();
  if (f !== 0) {
    writer.writeInt32(
      34,
      f
    );
  }
};


/**
 * optional int32 caseID = 1;
 * @return {number}
 */
proto.CasePB.CaseObject.prototype.getCaseid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.CasePB.CaseObject} returns this
 */
proto.CasePB.CaseObject.prototype.setCaseid = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional int32 caseNumber = 2;
 * @return {number}
 */
proto.CasePB.CaseObject.prototype.getCasenumber = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.CasePB.CaseObject} returns this
 */
proto.CasePB.CaseObject.prototype.setCasenumber = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional string caseName = 3;
 * @return {string}
 */
proto.CasePB.CaseObject.prototype.getCasename = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.CasePB.CaseObject} returns this
 */
proto.CasePB.CaseObject.prototype.setCasename = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string description = 4;
 * @return {string}
 */
proto.CasePB.CaseObject.prototype.getDescription = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.CasePB.CaseObject} returns this
 */
proto.CasePB.CaseObject.prototype.setDescription = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional int32 priceYear = 5;
 * @return {number}
 */
proto.CasePB.CaseObject.prototype.getPriceyear = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {number} value
 * @return {!proto.CasePB.CaseObject} returns this
 */
proto.CasePB.CaseObject.prototype.setPriceyear = function(value) {
  return jspb.Message.setProto3IntField(this, 5, value);
};


/**
 * optional string creationDate = 6;
 * @return {string}
 */
proto.CasePB.CaseObject.prototype.getCreationdate = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/**
 * @param {string} value
 * @return {!proto.CasePB.CaseObject} returns this
 */
proto.CasePB.CaseObject.prototype.setCreationdate = function(value) {
  return jspb.Message.setProto3StringField(this, 6, value);
};


/**
 * optional int32 caseTypeID = 7;
 * @return {number}
 */
proto.CasePB.CaseObject.prototype.getCasetypeid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 7, 0));
};


/**
 * @param {number} value
 * @return {!proto.CasePB.CaseObject} returns this
 */
proto.CasePB.CaseObject.prototype.setCasetypeid = function(value) {
  return jspb.Message.setProto3IntField(this, 7, value);
};


/**
 * optional int32 amount = 8;
 * @return {number}
 */
proto.CasePB.CaseObject.prototype.getAmount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 8, 0));
};


/**
 * @param {number} value
 * @return {!proto.CasePB.CaseObject} returns this
 */
proto.CasePB.CaseObject.prototype.setAmount = function(value) {
  return jspb.Message.setProto3IntField(this, 8, value);
};


/**
 * optional int32 caseUnitID = 9;
 * @return {number}
 */
proto.CasePB.CaseObject.prototype.getCaseunitid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 9, 0));
};


/**
 * @param {number} value
 * @return {!proto.CasePB.CaseObject} returns this
 */
proto.CasePB.CaseObject.prototype.setCaseunitid = function(value) {
  return jspb.Message.setProto3IntField(this, 9, value);
};


/**
 * optional int32 floor = 10;
 * @return {number}
 */
proto.CasePB.CaseObject.prototype.getFloor = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 10, 0));
};


/**
 * @param {number} value
 * @return {!proto.CasePB.CaseObject} returns this
 */
proto.CasePB.CaseObject.prototype.setFloor = function(value) {
  return jspb.Message.setProto3IntField(this, 10, value);
};


/**
 * optional int32 caseSystemID = 11;
 * @return {number}
 */
proto.CasePB.CaseObject.prototype.getCasesystemid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 11, 0));
};


/**
 * @param {number} value
 * @return {!proto.CasePB.CaseObject} returns this
 */
proto.CasePB.CaseObject.prototype.setCasesystemid = function(value) {
  return jspb.Message.setProto3IntField(this, 11, value);
};


/**
 * optional int32 year = 12;
 * @return {number}
 */
proto.CasePB.CaseObject.prototype.getYear = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 12, 0));
};


/**
 * @param {number} value
 * @return {!proto.CasePB.CaseObject} returns this
 */
proto.CasePB.CaseObject.prototype.setYear = function(value) {
  return jspb.Message.setProto3IntField(this, 12, value);
};


/**
 * optional string caseDescription = 13;
 * @return {string}
 */
proto.CasePB.CaseObject.prototype.getCasedescription = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 13, ""));
};


/**
 * @param {string} value
 * @return {!proto.CasePB.CaseObject} returns this
 */
proto.CasePB.CaseObject.prototype.setCasedescription = function(value) {
  return jspb.Message.setProto3StringField(this, 13, value);
};


/**
 * optional string caseImagePath = 14;
 * @return {string}
 */
proto.CasePB.CaseObject.prototype.getCaseimagepath = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 14, ""));
};


/**
 * @param {string} value
 * @return {!proto.CasePB.CaseObject} returns this
 */
proto.CasePB.CaseObject.prototype.setCaseimagepath = function(value) {
  return jspb.Message.setProto3StringField(this, 14, value);
};


/**
 * optional string caseMoviePath = 15;
 * @return {string}
 */
proto.CasePB.CaseObject.prototype.getCasemoviepath = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 15, ""));
};


/**
 * @param {string} value
 * @return {!proto.CasePB.CaseObject} returns this
 */
proto.CasePB.CaseObject.prototype.setCasemoviepath = function(value) {
  return jspb.Message.setProto3StringField(this, 15, value);
};


/**
 * optional string caseImportPath = 16;
 * @return {string}
 */
proto.CasePB.CaseObject.prototype.getCaseimportpath = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 16, ""));
};


/**
 * @param {string} value
 * @return {!proto.CasePB.CaseObject} returns this
 */
proto.CasePB.CaseObject.prototype.setCaseimportpath = function(value) {
  return jspb.Message.setProto3StringField(this, 16, value);
};


/**
 * optional string casePDFPath = 17;
 * @return {string}
 */
proto.CasePB.CaseObject.prototype.getCasepdfpath = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 17, ""));
};


/**
 * @param {string} value
 * @return {!proto.CasePB.CaseObject} returns this
 */
proto.CasePB.CaseObject.prototype.setCasepdfpath = function(value) {
  return jspb.Message.setProto3StringField(this, 17, value);
};


/**
 * optional string wellNumber_Lang = 18;
 * @return {string}
 */
proto.CasePB.CaseObject.prototype.getWellnumberLang = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 18, ""));
};


/**
 * @param {string} value
 * @return {!proto.CasePB.CaseObject} returns this
 */
proto.CasePB.CaseObject.prototype.setWellnumberLang = function(value) {
  return jspb.Message.setProto3StringField(this, 18, value);
};


/**
 * optional string wellNumber_Bips = 19;
 * @return {string}
 */
proto.CasePB.CaseObject.prototype.getWellnumberBips = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 19, ""));
};


/**
 * @param {string} value
 * @return {!proto.CasePB.CaseObject} returns this
 */
proto.CasePB.CaseObject.prototype.setWellnumberBips = function(value) {
  return jspb.Message.setProto3StringField(this, 19, value);
};


/**
 * optional int32 userID = 20;
 * @return {number}
 */
proto.CasePB.CaseObject.prototype.getUserid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 20, 0));
};


/**
 * @param {number} value
 * @return {!proto.CasePB.CaseObject} returns this
 */
proto.CasePB.CaseObject.prototype.setUserid = function(value) {
  return jspb.Message.setProto3IntField(this, 20, value);
};


/**
 * optional int32 propertyBBR = 21;
 * @return {number}
 */
proto.CasePB.CaseObject.prototype.getPropertybbr = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 21, 0));
};


/**
 * @param {number} value
 * @return {!proto.CasePB.CaseObject} returns this
 */
proto.CasePB.CaseObject.prototype.setPropertybbr = function(value) {
  return jspb.Message.setProto3IntField(this, 21, value);
};


/**
 * optional string propertyName = 22;
 * @return {string}
 */
proto.CasePB.CaseObject.prototype.getPropertyname = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 22, ""));
};


/**
 * @param {string} value
 * @return {!proto.CasePB.CaseObject} returns this
 */
proto.CasePB.CaseObject.prototype.setPropertyname = function(value) {
  return jspb.Message.setProto3StringField(this, 22, value);
};


/**
 * optional int32 propertyAge = 23;
 * @return {number}
 */
proto.CasePB.CaseObject.prototype.getPropertyage = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 23, 0));
};


/**
 * @param {number} value
 * @return {!proto.CasePB.CaseObject} returns this
 */
proto.CasePB.CaseObject.prototype.setPropertyage = function(value) {
  return jspb.Message.setProto3IntField(this, 23, value);
};


/**
 * optional int32 propertyTypeID = 24;
 * @return {number}
 */
proto.CasePB.CaseObject.prototype.getPropertytypeid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 24, 0));
};


/**
 * @param {number} value
 * @return {!proto.CasePB.CaseObject} returns this
 */
proto.CasePB.CaseObject.prototype.setPropertytypeid = function(value) {
  return jspb.Message.setProto3IntField(this, 24, value);
};


/**
 * optional int32 propertyApplicationID = 25;
 * @return {number}
 */
proto.CasePB.CaseObject.prototype.getPropertyapplicationid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 25, 0));
};


/**
 * @param {number} value
 * @return {!proto.CasePB.CaseObject} returns this
 */
proto.CasePB.CaseObject.prototype.setPropertyapplicationid = function(value) {
  return jspb.Message.setProto3IntField(this, 25, value);
};


/**
 * optional string propertyAddress = 26;
 * @return {string}
 */
proto.CasePB.CaseObject.prototype.getPropertyaddress = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 26, ""));
};


/**
 * @param {string} value
 * @return {!proto.CasePB.CaseObject} returns this
 */
proto.CasePB.CaseObject.prototype.setPropertyaddress = function(value) {
  return jspb.Message.setProto3StringField(this, 26, value);
};


/**
 * optional int32 propertyPostalNumber = 27;
 * @return {number}
 */
proto.CasePB.CaseObject.prototype.getPropertypostalnumber = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 27, 0));
};


/**
 * @param {number} value
 * @return {!proto.CasePB.CaseObject} returns this
 */
proto.CasePB.CaseObject.prototype.setPropertypostalnumber = function(value) {
  return jspb.Message.setProto3IntField(this, 27, value);
};


/**
 * optional string propertyCity = 28;
 * @return {string}
 */
proto.CasePB.CaseObject.prototype.getPropertycity = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 28, ""));
};


/**
 * @param {string} value
 * @return {!proto.CasePB.CaseObject} returns this
 */
proto.CasePB.CaseObject.prototype.setPropertycity = function(value) {
  return jspb.Message.setProto3StringField(this, 28, value);
};


/**
 * optional string propertyCadastreNumber = 29;
 * @return {string}
 */
proto.CasePB.CaseObject.prototype.getPropertycadastrenumber = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 29, ""));
};


/**
 * @param {string} value
 * @return {!proto.CasePB.CaseObject} returns this
 */
proto.CasePB.CaseObject.prototype.setPropertycadastrenumber = function(value) {
  return jspb.Message.setProto3StringField(this, 29, value);
};


/**
 * optional string propertyOwnerLow = 30;
 * @return {string}
 */
proto.CasePB.CaseObject.prototype.getPropertyownerlow = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 30, ""));
};


/**
 * @param {string} value
 * @return {!proto.CasePB.CaseObject} returns this
 */
proto.CasePB.CaseObject.prototype.setPropertyownerlow = function(value) {
  return jspb.Message.setProto3StringField(this, 30, value);
};


/**
 * optional int32 caseLanguage = 31;
 * @return {number}
 */
proto.CasePB.CaseObject.prototype.getCaselanguage = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 31, 0));
};


/**
 * @param {number} value
 * @return {!proto.CasePB.CaseObject} returns this
 */
proto.CasePB.CaseObject.prototype.setCaselanguage = function(value) {
  return jspb.Message.setProto3IntField(this, 31, value);
};


/**
 * optional int32 standardRenovationCaseID = 32;
 * @return {number}
 */
proto.CasePB.CaseObject.prototype.getStandardrenovationcaseid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 32, 0));
};


/**
 * @param {number} value
 * @return {!proto.CasePB.CaseObject} returns this
 */
proto.CasePB.CaseObject.prototype.setStandardrenovationcaseid = function(value) {
  return jspb.Message.setProto3IntField(this, 32, value);
};


/**
 * optional int32 entrepreneurID = 33;
 * @return {number}
 */
proto.CasePB.CaseObject.prototype.getEntrepreneurid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 33, 0));
};


/**
 * @param {number} value
 * @return {!proto.CasePB.CaseObject} returns this
 */
proto.CasePB.CaseObject.prototype.setEntrepreneurid = function(value) {
  return jspb.Message.setProto3IntField(this, 33, value);
};


/**
 * optional int32 districtID = 34;
 * @return {number}
 */
proto.CasePB.CaseObject.prototype.getDistrictid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 34, 0));
};


/**
 * @param {number} value
 * @return {!proto.CasePB.CaseObject} returns this
 */
proto.CasePB.CaseObject.prototype.setDistrictid = function(value) {
  return jspb.Message.setProto3IntField(this, 34, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.CasePB.CaseList.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.CasePB.CaseList.prototype.toObject = function(opt_includeInstance) {
  return proto.CasePB.CaseList.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.CasePB.CaseList} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.CasePB.CaseList.toObject = function(includeInstance, msg) {
  var f, obj = {
    casesList: jspb.Message.toObjectList(msg.getCasesList(),
    proto.CasePB.CaseObject.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.CasePB.CaseList}
 */
proto.CasePB.CaseList.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.CasePB.CaseList;
  return proto.CasePB.CaseList.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.CasePB.CaseList} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.CasePB.CaseList}
 */
proto.CasePB.CaseList.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.CasePB.CaseObject;
      reader.readMessage(value,proto.CasePB.CaseObject.deserializeBinaryFromReader);
      msg.addCases(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.CasePB.CaseList.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.CasePB.CaseList.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.CasePB.CaseList} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.CasePB.CaseList.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCasesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.CasePB.CaseObject.serializeBinaryToWriter
    );
  }
};


/**
 * repeated CaseObject cases = 1;
 * @return {!Array<!proto.CasePB.CaseObject>}
 */
proto.CasePB.CaseList.prototype.getCasesList = function() {
  return /** @type{!Array<!proto.CasePB.CaseObject>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.CasePB.CaseObject, 1));
};


/**
 * @param {!Array<!proto.CasePB.CaseObject>} value
 * @return {!proto.CasePB.CaseList} returns this
*/
proto.CasePB.CaseList.prototype.setCasesList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.CasePB.CaseObject=} opt_value
 * @param {number=} opt_index
 * @return {!proto.CasePB.CaseObject}
 */
proto.CasePB.CaseList.prototype.addCases = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.CasePB.CaseObject, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.CasePB.CaseList} returns this
 */
proto.CasePB.CaseList.prototype.clearCasesList = function() {
  return this.setCasesList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.CasePB.FrontPageObject.prototype.toObject = function(opt_includeInstance) {
  return proto.CasePB.FrontPageObject.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.CasePB.FrontPageObject} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.CasePB.FrontPageObject.toObject = function(includeInstance, msg) {
  var f, obj = {
    casenumber: jspb.Message.getFieldWithDefault(msg, 1, 0),
    casename: jspb.Message.getFieldWithDefault(msg, 2, ""),
    clientname: jspb.Message.getFieldWithDefault(msg, 3, ""),
    description: jspb.Message.getFieldWithDefault(msg, 4, ""),
    caseimportid: jspb.Message.getFieldWithDefault(msg, 5, 0),
    clienttype: jspb.Message.getFieldWithDefault(msg, 6, ""),
    sections: jspb.Message.getFieldWithDefault(msg, 7, 0),
    laterals: jspb.Message.getFieldWithDefault(msg, 8, 0),
    manholes: jspb.Message.getFieldWithDefault(msg, 9, 0),
    groups: jspb.Message.getFieldWithDefault(msg, 10, 0),
    sectionspercentage: jspb.Message.getFieldWithDefault(msg, 11, 0),
    lateralspercentage: jspb.Message.getFieldWithDefault(msg, 12, 0),
    manholespercentage: jspb.Message.getFieldWithDefault(msg, 13, 0),
    total: jspb.Message.getFieldWithDefault(msg, 14, 0),
    caseid: jspb.Message.getFieldWithDefault(msg, 15, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.CasePB.FrontPageObject}
 */
proto.CasePB.FrontPageObject.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.CasePB.FrontPageObject;
  return proto.CasePB.FrontPageObject.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.CasePB.FrontPageObject} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.CasePB.FrontPageObject}
 */
proto.CasePB.FrontPageObject.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setCasenumber(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setCasename(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setClientname(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setDescription(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setCaseimportid(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setClienttype(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setSections(value);
      break;
    case 8:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setLaterals(value);
      break;
    case 9:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setManholes(value);
      break;
    case 10:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setGroups(value);
      break;
    case 11:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setSectionspercentage(value);
      break;
    case 12:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setLateralspercentage(value);
      break;
    case 13:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setManholespercentage(value);
      break;
    case 14:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setTotal(value);
      break;
    case 15:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setCaseid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.CasePB.FrontPageObject.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.CasePB.FrontPageObject.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.CasePB.FrontPageObject} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.CasePB.FrontPageObject.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCasenumber();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getCasename();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getClientname();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getDescription();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getCaseimportid();
  if (f !== 0) {
    writer.writeInt32(
      5,
      f
    );
  }
  f = message.getClienttype();
  if (f.length > 0) {
    writer.writeString(
      6,
      f
    );
  }
  f = message.getSections();
  if (f !== 0) {
    writer.writeInt32(
      7,
      f
    );
  }
  f = message.getLaterals();
  if (f !== 0) {
    writer.writeInt32(
      8,
      f
    );
  }
  f = message.getManholes();
  if (f !== 0) {
    writer.writeInt32(
      9,
      f
    );
  }
  f = message.getGroups();
  if (f !== 0) {
    writer.writeInt32(
      10,
      f
    );
  }
  f = message.getSectionspercentage();
  if (f !== 0) {
    writer.writeInt32(
      11,
      f
    );
  }
  f = message.getLateralspercentage();
  if (f !== 0) {
    writer.writeInt32(
      12,
      f
    );
  }
  f = message.getManholespercentage();
  if (f !== 0) {
    writer.writeInt32(
      13,
      f
    );
  }
  f = message.getTotal();
  if (f !== 0) {
    writer.writeInt32(
      14,
      f
    );
  }
  f = message.getCaseid();
  if (f !== 0) {
    writer.writeInt32(
      15,
      f
    );
  }
};


/**
 * optional int32 caseNumber = 1;
 * @return {number}
 */
proto.CasePB.FrontPageObject.prototype.getCasenumber = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.CasePB.FrontPageObject} returns this
 */
proto.CasePB.FrontPageObject.prototype.setCasenumber = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional string caseName = 2;
 * @return {string}
 */
proto.CasePB.FrontPageObject.prototype.getCasename = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.CasePB.FrontPageObject} returns this
 */
proto.CasePB.FrontPageObject.prototype.setCasename = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string clientName = 3;
 * @return {string}
 */
proto.CasePB.FrontPageObject.prototype.getClientname = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.CasePB.FrontPageObject} returns this
 */
proto.CasePB.FrontPageObject.prototype.setClientname = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string description = 4;
 * @return {string}
 */
proto.CasePB.FrontPageObject.prototype.getDescription = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.CasePB.FrontPageObject} returns this
 */
proto.CasePB.FrontPageObject.prototype.setDescription = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional int32 caseImportId = 5;
 * @return {number}
 */
proto.CasePB.FrontPageObject.prototype.getCaseimportid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {number} value
 * @return {!proto.CasePB.FrontPageObject} returns this
 */
proto.CasePB.FrontPageObject.prototype.setCaseimportid = function(value) {
  return jspb.Message.setProto3IntField(this, 5, value);
};


/**
 * optional string clientType = 6;
 * @return {string}
 */
proto.CasePB.FrontPageObject.prototype.getClienttype = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/**
 * @param {string} value
 * @return {!proto.CasePB.FrontPageObject} returns this
 */
proto.CasePB.FrontPageObject.prototype.setClienttype = function(value) {
  return jspb.Message.setProto3StringField(this, 6, value);
};


/**
 * optional int32 sections = 7;
 * @return {number}
 */
proto.CasePB.FrontPageObject.prototype.getSections = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 7, 0));
};


/**
 * @param {number} value
 * @return {!proto.CasePB.FrontPageObject} returns this
 */
proto.CasePB.FrontPageObject.prototype.setSections = function(value) {
  return jspb.Message.setProto3IntField(this, 7, value);
};


/**
 * optional int32 laterals = 8;
 * @return {number}
 */
proto.CasePB.FrontPageObject.prototype.getLaterals = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 8, 0));
};


/**
 * @param {number} value
 * @return {!proto.CasePB.FrontPageObject} returns this
 */
proto.CasePB.FrontPageObject.prototype.setLaterals = function(value) {
  return jspb.Message.setProto3IntField(this, 8, value);
};


/**
 * optional int32 manholes = 9;
 * @return {number}
 */
proto.CasePB.FrontPageObject.prototype.getManholes = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 9, 0));
};


/**
 * @param {number} value
 * @return {!proto.CasePB.FrontPageObject} returns this
 */
proto.CasePB.FrontPageObject.prototype.setManholes = function(value) {
  return jspb.Message.setProto3IntField(this, 9, value);
};


/**
 * optional int32 groups = 10;
 * @return {number}
 */
proto.CasePB.FrontPageObject.prototype.getGroups = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 10, 0));
};


/**
 * @param {number} value
 * @return {!proto.CasePB.FrontPageObject} returns this
 */
proto.CasePB.FrontPageObject.prototype.setGroups = function(value) {
  return jspb.Message.setProto3IntField(this, 10, value);
};


/**
 * optional int32 sectionsPercentage = 11;
 * @return {number}
 */
proto.CasePB.FrontPageObject.prototype.getSectionspercentage = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 11, 0));
};


/**
 * @param {number} value
 * @return {!proto.CasePB.FrontPageObject} returns this
 */
proto.CasePB.FrontPageObject.prototype.setSectionspercentage = function(value) {
  return jspb.Message.setProto3IntField(this, 11, value);
};


/**
 * optional int32 lateralsPercentage = 12;
 * @return {number}
 */
proto.CasePB.FrontPageObject.prototype.getLateralspercentage = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 12, 0));
};


/**
 * @param {number} value
 * @return {!proto.CasePB.FrontPageObject} returns this
 */
proto.CasePB.FrontPageObject.prototype.setLateralspercentage = function(value) {
  return jspb.Message.setProto3IntField(this, 12, value);
};


/**
 * optional int32 manholesPercentage = 13;
 * @return {number}
 */
proto.CasePB.FrontPageObject.prototype.getManholespercentage = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 13, 0));
};


/**
 * @param {number} value
 * @return {!proto.CasePB.FrontPageObject} returns this
 */
proto.CasePB.FrontPageObject.prototype.setManholespercentage = function(value) {
  return jspb.Message.setProto3IntField(this, 13, value);
};


/**
 * optional int32 total = 14;
 * @return {number}
 */
proto.CasePB.FrontPageObject.prototype.getTotal = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 14, 0));
};


/**
 * @param {number} value
 * @return {!proto.CasePB.FrontPageObject} returns this
 */
proto.CasePB.FrontPageObject.prototype.setTotal = function(value) {
  return jspb.Message.setProto3IntField(this, 14, value);
};


/**
 * optional int32 caseID = 15;
 * @return {number}
 */
proto.CasePB.FrontPageObject.prototype.getCaseid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 15, 0));
};


/**
 * @param {number} value
 * @return {!proto.CasePB.FrontPageObject} returns this
 */
proto.CasePB.FrontPageObject.prototype.setCaseid = function(value) {
  return jspb.Message.setProto3IntField(this, 15, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.CasePB.FrontpageList.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.CasePB.FrontpageList.prototype.toObject = function(opt_includeInstance) {
  return proto.CasePB.FrontpageList.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.CasePB.FrontpageList} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.CasePB.FrontpageList.toObject = function(includeInstance, msg) {
  var f, obj = {
    fpobjectsList: jspb.Message.toObjectList(msg.getFpobjectsList(),
    proto.CasePB.FrontPageObject.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.CasePB.FrontpageList}
 */
proto.CasePB.FrontpageList.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.CasePB.FrontpageList;
  return proto.CasePB.FrontpageList.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.CasePB.FrontpageList} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.CasePB.FrontpageList}
 */
proto.CasePB.FrontpageList.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.CasePB.FrontPageObject;
      reader.readMessage(value,proto.CasePB.FrontPageObject.deserializeBinaryFromReader);
      msg.addFpobjects(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.CasePB.FrontpageList.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.CasePB.FrontpageList.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.CasePB.FrontpageList} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.CasePB.FrontpageList.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getFpobjectsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.CasePB.FrontPageObject.serializeBinaryToWriter
    );
  }
};


/**
 * repeated FrontPageObject fpObjects = 1;
 * @return {!Array<!proto.CasePB.FrontPageObject>}
 */
proto.CasePB.FrontpageList.prototype.getFpobjectsList = function() {
  return /** @type{!Array<!proto.CasePB.FrontPageObject>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.CasePB.FrontPageObject, 1));
};


/**
 * @param {!Array<!proto.CasePB.FrontPageObject>} value
 * @return {!proto.CasePB.FrontpageList} returns this
*/
proto.CasePB.FrontpageList.prototype.setFpobjectsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.CasePB.FrontPageObject=} opt_value
 * @param {number=} opt_index
 * @return {!proto.CasePB.FrontPageObject}
 */
proto.CasePB.FrontpageList.prototype.addFpobjects = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.CasePB.FrontPageObject, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.CasePB.FrontpageList} returns this
 */
proto.CasePB.FrontpageList.prototype.clearFpobjectsList = function() {
  return this.setFpobjectsList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.CasePB.CaseUnitObject.prototype.toObject = function(opt_includeInstance) {
  return proto.CasePB.CaseUnitObject.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.CasePB.CaseUnitObject} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.CasePB.CaseUnitObject.toObject = function(includeInstance, msg) {
  var f, obj = {
    caseunitid: jspb.Message.getFieldWithDefault(msg, 1, 0),
    caseunitname: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.CasePB.CaseUnitObject}
 */
proto.CasePB.CaseUnitObject.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.CasePB.CaseUnitObject;
  return proto.CasePB.CaseUnitObject.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.CasePB.CaseUnitObject} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.CasePB.CaseUnitObject}
 */
proto.CasePB.CaseUnitObject.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setCaseunitid(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setCaseunitname(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.CasePB.CaseUnitObject.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.CasePB.CaseUnitObject.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.CasePB.CaseUnitObject} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.CasePB.CaseUnitObject.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCaseunitid();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getCaseunitname();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional int32 caseUnitID = 1;
 * @return {number}
 */
proto.CasePB.CaseUnitObject.prototype.getCaseunitid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.CasePB.CaseUnitObject} returns this
 */
proto.CasePB.CaseUnitObject.prototype.setCaseunitid = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional string caseUnitName = 2;
 * @return {string}
 */
proto.CasePB.CaseUnitObject.prototype.getCaseunitname = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.CasePB.CaseUnitObject} returns this
 */
proto.CasePB.CaseUnitObject.prototype.setCaseunitname = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.CasePB.UserObject.prototype.toObject = function(opt_includeInstance) {
  return proto.CasePB.UserObject.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.CasePB.UserObject} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.CasePB.UserObject.toObject = function(includeInstance, msg) {
  var f, obj = {
    userid: jspb.Message.getFieldWithDefault(msg, 1, 0),
    userlogin: jspb.Message.getFieldWithDefault(msg, 2, ""),
    username: jspb.Message.getFieldWithDefault(msg, 3, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.CasePB.UserObject}
 */
proto.CasePB.UserObject.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.CasePB.UserObject;
  return proto.CasePB.UserObject.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.CasePB.UserObject} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.CasePB.UserObject}
 */
proto.CasePB.UserObject.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setUserid(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setUserlogin(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setUsername(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.CasePB.UserObject.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.CasePB.UserObject.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.CasePB.UserObject} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.CasePB.UserObject.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getUserid();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getUserlogin();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getUsername();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
};


/**
 * optional int32 userID = 1;
 * @return {number}
 */
proto.CasePB.UserObject.prototype.getUserid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.CasePB.UserObject} returns this
 */
proto.CasePB.UserObject.prototype.setUserid = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional string userLogin = 2;
 * @return {string}
 */
proto.CasePB.UserObject.prototype.getUserlogin = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.CasePB.UserObject} returns this
 */
proto.CasePB.UserObject.prototype.setUserlogin = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string userName = 3;
 * @return {string}
 */
proto.CasePB.UserObject.prototype.getUsername = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.CasePB.UserObject} returns this
 */
proto.CasePB.UserObject.prototype.setUsername = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.CasePB.PropertyUsabilityObject.prototype.toObject = function(opt_includeInstance) {
  return proto.CasePB.PropertyUsabilityObject.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.CasePB.PropertyUsabilityObject} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.CasePB.PropertyUsabilityObject.toObject = function(includeInstance, msg) {
  var f, obj = {
    propertyusabilityid: jspb.Message.getFieldWithDefault(msg, 1, 0),
    propertyusabilityname: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.CasePB.PropertyUsabilityObject}
 */
proto.CasePB.PropertyUsabilityObject.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.CasePB.PropertyUsabilityObject;
  return proto.CasePB.PropertyUsabilityObject.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.CasePB.PropertyUsabilityObject} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.CasePB.PropertyUsabilityObject}
 */
proto.CasePB.PropertyUsabilityObject.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setPropertyusabilityid(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setPropertyusabilityname(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.CasePB.PropertyUsabilityObject.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.CasePB.PropertyUsabilityObject.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.CasePB.PropertyUsabilityObject} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.CasePB.PropertyUsabilityObject.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPropertyusabilityid();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getPropertyusabilityname();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional int32 propertyUsabilityID = 1;
 * @return {number}
 */
proto.CasePB.PropertyUsabilityObject.prototype.getPropertyusabilityid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.CasePB.PropertyUsabilityObject} returns this
 */
proto.CasePB.PropertyUsabilityObject.prototype.setPropertyusabilityid = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional string propertyUsabilityName = 2;
 * @return {string}
 */
proto.CasePB.PropertyUsabilityObject.prototype.getPropertyusabilityname = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.CasePB.PropertyUsabilityObject} returns this
 */
proto.CasePB.PropertyUsabilityObject.prototype.setPropertyusabilityname = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.CasePB.CaseSystemObject.prototype.toObject = function(opt_includeInstance) {
  return proto.CasePB.CaseSystemObject.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.CasePB.CaseSystemObject} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.CasePB.CaseSystemObject.toObject = function(includeInstance, msg) {
  var f, obj = {
    casesystemid: jspb.Message.getFieldWithDefault(msg, 1, 0),
    casesystemname: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.CasePB.CaseSystemObject}
 */
proto.CasePB.CaseSystemObject.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.CasePB.CaseSystemObject;
  return proto.CasePB.CaseSystemObject.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.CasePB.CaseSystemObject} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.CasePB.CaseSystemObject}
 */
proto.CasePB.CaseSystemObject.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setCasesystemid(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setCasesystemname(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.CasePB.CaseSystemObject.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.CasePB.CaseSystemObject.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.CasePB.CaseSystemObject} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.CasePB.CaseSystemObject.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCasesystemid();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getCasesystemname();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional int32 caseSystemID = 1;
 * @return {number}
 */
proto.CasePB.CaseSystemObject.prototype.getCasesystemid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.CasePB.CaseSystemObject} returns this
 */
proto.CasePB.CaseSystemObject.prototype.setCasesystemid = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional string caseSystemName = 2;
 * @return {string}
 */
proto.CasePB.CaseSystemObject.prototype.getCasesystemname = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.CasePB.CaseSystemObject} returns this
 */
proto.CasePB.CaseSystemObject.prototype.setCasesystemname = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.CasePB.PropertyTypeObject.prototype.toObject = function(opt_includeInstance) {
  return proto.CasePB.PropertyTypeObject.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.CasePB.PropertyTypeObject} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.CasePB.PropertyTypeObject.toObject = function(includeInstance, msg) {
  var f, obj = {
    propertytypeid: jspb.Message.getFieldWithDefault(msg, 1, 0),
    propertytypename: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.CasePB.PropertyTypeObject}
 */
proto.CasePB.PropertyTypeObject.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.CasePB.PropertyTypeObject;
  return proto.CasePB.PropertyTypeObject.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.CasePB.PropertyTypeObject} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.CasePB.PropertyTypeObject}
 */
proto.CasePB.PropertyTypeObject.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setPropertytypeid(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setPropertytypename(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.CasePB.PropertyTypeObject.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.CasePB.PropertyTypeObject.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.CasePB.PropertyTypeObject} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.CasePB.PropertyTypeObject.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPropertytypeid();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getPropertytypename();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional int32 propertyTypeID = 1;
 * @return {number}
 */
proto.CasePB.PropertyTypeObject.prototype.getPropertytypeid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.CasePB.PropertyTypeObject} returns this
 */
proto.CasePB.PropertyTypeObject.prototype.setPropertytypeid = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional string propertyTypeName = 2;
 * @return {string}
 */
proto.CasePB.PropertyTypeObject.prototype.getPropertytypename = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.CasePB.PropertyTypeObject} returns this
 */
proto.CasePB.PropertyTypeObject.prototype.setPropertytypename = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.CasePB.RenovationAppendixObject.prototype.toObject = function(opt_includeInstance) {
  return proto.CasePB.RenovationAppendixObject.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.CasePB.RenovationAppendixObject} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.CasePB.RenovationAppendixObject.toObject = function(includeInstance, msg) {
  var f, obj = {
    renovationappendixid: jspb.Message.getFieldWithDefault(msg, 1, 0),
    renovationappendixprice: jspb.Message.getFieldWithDefault(msg, 2, ""),
    manuel: jspb.Message.getFieldWithDefault(msg, 3, ""),
    amount: jspb.Message.getFieldWithDefault(msg, 4, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.CasePB.RenovationAppendixObject}
 */
proto.CasePB.RenovationAppendixObject.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.CasePB.RenovationAppendixObject;
  return proto.CasePB.RenovationAppendixObject.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.CasePB.RenovationAppendixObject} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.CasePB.RenovationAppendixObject}
 */
proto.CasePB.RenovationAppendixObject.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setRenovationappendixid(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setRenovationappendixprice(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setManuel(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setAmount(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.CasePB.RenovationAppendixObject.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.CasePB.RenovationAppendixObject.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.CasePB.RenovationAppendixObject} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.CasePB.RenovationAppendixObject.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRenovationappendixid();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getRenovationappendixprice();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getManuel();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getAmount();
  if (f !== 0) {
    writer.writeInt64(
      4,
      f
    );
  }
};


/**
 * optional int32 renovationAppendixID = 1;
 * @return {number}
 */
proto.CasePB.RenovationAppendixObject.prototype.getRenovationappendixid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.CasePB.RenovationAppendixObject} returns this
 */
proto.CasePB.RenovationAppendixObject.prototype.setRenovationappendixid = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional string renovationAppendixPrice = 2;
 * @return {string}
 */
proto.CasePB.RenovationAppendixObject.prototype.getRenovationappendixprice = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.CasePB.RenovationAppendixObject} returns this
 */
proto.CasePB.RenovationAppendixObject.prototype.setRenovationappendixprice = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string manuel = 3;
 * @return {string}
 */
proto.CasePB.RenovationAppendixObject.prototype.getManuel = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.CasePB.RenovationAppendixObject} returns this
 */
proto.CasePB.RenovationAppendixObject.prototype.setManuel = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional int64 amount = 4;
 * @return {number}
 */
proto.CasePB.RenovationAppendixObject.prototype.getAmount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.CasePB.RenovationAppendixObject} returns this
 */
proto.CasePB.RenovationAppendixObject.prototype.setAmount = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.CasePB.StatusRepley.prototype.toObject = function(opt_includeInstance) {
  return proto.CasePB.StatusRepley.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.CasePB.StatusRepley} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.CasePB.StatusRepley.toObject = function(includeInstance, msg) {
  var f, obj = {
    status: jspb.Message.getFieldWithDefault(msg, 1, ""),
    command: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.CasePB.StatusRepley}
 */
proto.CasePB.StatusRepley.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.CasePB.StatusRepley;
  return proto.CasePB.StatusRepley.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.CasePB.StatusRepley} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.CasePB.StatusRepley}
 */
proto.CasePB.StatusRepley.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setStatus(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setCommand(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.CasePB.StatusRepley.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.CasePB.StatusRepley.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.CasePB.StatusRepley} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.CasePB.StatusRepley.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getStatus();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getCommand();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
};


/**
 * optional string status = 1;
 * @return {string}
 */
proto.CasePB.StatusRepley.prototype.getStatus = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.CasePB.StatusRepley} returns this
 */
proto.CasePB.StatusRepley.prototype.setStatus = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional int32 command = 2;
 * @return {number}
 */
proto.CasePB.StatusRepley.prototype.getCommand = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.CasePB.StatusRepley} returns this
 */
proto.CasePB.StatusRepley.prototype.setCommand = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


goog.object.extend(exports, proto.CasePB);
